
riscv64_dwcssi.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000012340000 <_start>:
#endif

		.section .text.entry
		.global _start
_start:
		lla		sp, stack_end
    12340000:	00000117          	auipc	sp,0x0
    12340004:	41810113          	addi	sp,sp,1048 # 12340418 <stack_end>
		jal 	flash_dwcssi
    12340008:	150000ef          	jal	ra,12340158 <flash_dwcssi>
		ebreak
    1234000c:	00100073          	ebreak

0000000012340010 <dwcssi_set_bits>:
}

static void dwcssi_read_reg(volatile uint32_t *ctrl_base, uint32_t *value, uint32_t address)
{

    *value = ctrl_base[address / 4];
    12340010:	0025d59b          	srliw	a1,a1,0x2
    12340014:	00259593          	slli	a1,a1,0x2
    12340018:	00b50533          	add	a0,a0,a1
    1234001c:	00052783          	lw	a5,0(a0)

static void dwcssi_set_bits(volatile uint32_t *ctrl_base, uint32_t address, uint32_t value, uint32_t bitmask)
{
    uint32_t rd_value, wr_value;
    dwcssi_read_reg(ctrl_base, &rd_value,address);
    wr_value = (rd_value & ~bitmask) | (value & bitmask);
    12340020:	00f64633          	xor	a2,a2,a5
    12340024:	00d67633          	and	a2,a2,a3
    12340028:	00f64633          	xor	a2,a2,a5
    ctrl_base[address/4] = value;
    1234002c:	00c52023          	sw	a2,0(a0)
    dwcssi_write_reg(ctrl_base, address, wr_value);
}
    12340030:	00008067          	ret

0000000012340034 <dwcssi_txwm_wait>:
    dwcssi_enable(ctrl_base);
}

/*dwc base functions*/
static int dwcssi_txwm_wait(volatile uint32_t *ctrl_base)
{
    12340034:	3e900793          	li	a5,1001
    *value = ctrl_base[address / 4];
    12340038:	02852703          	lw	a4,40(a0)
    uint32_t timeout = 0;
    // TX fifo empty
    while(1)
    {
        if(dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_TFE_MASK, 2))
    1234003c:	00477713          	andi	a4,a4,4
    12340040:	00071a63          	bnez	a4,12340054 <dwcssi_txwm_wait+0x20>
            break;
        timeout = timeout + 1;
        if(timeout > TIMEOUT)
    12340044:	fff7879b          	addiw	a5,a5,-1
    12340048:	fe0798e3          	bnez	a5,12340038 <dwcssi_txwm_wait+0x4>
            return ERROR_DWCSSI_TXWM_WAIT;
    1234004c:	00200537          	lui	a0,0x200
    12340050:	00008067          	ret
    12340054:	3e900793          	li	a5,1001
    *value = ctrl_base[address / 4];
    12340058:	02852703          	lw	a4,40(a0) # 200028 <_start-0x1213ffd8>
    }

    timeout = 0;
    while (1) {
        if(!(dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_BUSY_MASK, 0)))
    1234005c:	00177713          	andi	a4,a4,1
    12340060:	00070863          	beqz	a4,12340070 <dwcssi_txwm_wait+0x3c>
            break;
        timeout = timeout + 1;
        if(timeout > TIMEOUT)
    12340064:	fff7879b          	addiw	a5,a5,-1
    12340068:	fe0798e3          	bnez	a5,12340058 <dwcssi_txwm_wait+0x24>
    1234006c:	fe1ff06f          	j	1234004c <dwcssi_txwm_wait+0x18>
            return ERROR_DWCSSI_TXWM_WAIT;
    }

    return ERROR_OK;
    12340070:	00000513          	li	a0,0
}
    12340074:	00008067          	ret

0000000012340078 <dwcssi_tx>:
    *value = ctrl_base[address / 4];
    12340078:	02852783          	lw	a5,40(a0)
    uint32_t fifo_not_full=0;

    while(1) 
    {
        fifo_not_full = dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_TFTNF_MASK, 1);
        if(fifo_not_full)
    1234007c:	0027f793          	andi	a5,a5,2
    12340080:	fe078ce3          	beqz	a5,12340078 <dwcssi_tx>
    ctrl_base[address/4] = value;
    12340084:	06b52023          	sw	a1,96(a0)
        }
    }

    // printf("tx timeout\n");
    return ERROR_DWCSSI_TX;
}
    12340088:	00000513          	li	a0,0
    1234008c:	00008067          	ret

0000000012340090 <dwcssi_wait_flash_idle>:
    *value = ctrl_base[address / 4];
    12340090:	00852783          	lw	a5,8(a0)
    
    return ERROR_DWCSSI_RX;
}

static int dwcssi_wait_flash_idle(volatile uint32_t *ctrl_base)
{
    12340094:	ff010113          	addi	sp,sp,-16
    12340098:	00113423          	sd	ra,8(sp)
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    1234009c:	ffe7f793          	andi	a5,a5,-2
{
    123400a0:	00813023          	sd	s0,0(sp)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123400a4:	00c016b7          	lui	a3,0xc01
    123400a8:	00001637          	lui	a2,0x1
    ctrl_base[address/4] = value;
    123400ac:	00f52423          	sw	a5,8(a0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123400b0:	c0f68693          	addi	a3,a3,-1009 # c00c0f <_start-0x1173f3f1>
    123400b4:	c0760613          	addi	a2,a2,-1017 # c07 <_start-0x1233f3f9>
    123400b8:	00000593          	li	a1,0
{
    123400bc:	00050413          	mv	s0,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123400c0:	f51ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    123400c4:	000106b7          	lui	a3,0x10
    123400c8:	fff68693          	addi	a3,a3,-1 # ffff <_start-0x12330001>
    123400cc:	00000613          	li	a2,0
    123400d0:	00400593          	li	a1,4
    123400d4:	00040513          	mv	a0,s0
    123400d8:	f39ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    123400dc:	00ff06b7          	lui	a3,0xff0
    123400e0:	0ff68693          	addi	a3,a3,255 # ff00ff <_start-0x1134ff01>
    123400e4:	00000613          	li	a2,0
    123400e8:	01800593          	li	a1,24
    123400ec:	00040513          	mv	a0,s0
    123400f0:	f21ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    123400f4:	00842783          	lw	a5,8(s0)
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    123400f8:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    123400fc:	00f42423          	sw	a5,8(s0)

    dwcssi_config_eeprom(ctrl_base, rx_len);

    while(1)
    {
        result = dwcssi_tx(ctrl_base, SPIFLASH_READ_STATUS);
    12340100:	00500593          	li	a1,5
    12340104:	00040513          	mv	a0,s0
    12340108:	f71ff0ef          	jal	ra,12340078 <dwcssi_tx>
    1234010c:	0005051b          	sext.w	a0,a0
        if (result != ERROR_OK)
    12340110:	00050c63          	beqz	a0,12340128 <dwcssi_wait_flash_idle+0x98>
	    	return result | ERROR_STACK(0x000200);
    12340114:	20056513          	ori	a0,a0,512
                return (ERROR_OK);
            }
        }
    }

}
    12340118:	00813083          	ld	ra,8(sp)
    1234011c:	00013403          	ld	s0,0(sp)
    12340120:	01010113          	addi	sp,sp,16
    12340124:	00008067          	ret
        if (dwcssi_txwm_wait(ctrl_base) != ERROR_OK)
    12340128:	00040513          	mv	a0,s0
    1234012c:	f09ff0ef          	jal	ra,12340034 <dwcssi_txwm_wait>
    12340130:	02051063          	bnez	a0,12340150 <dwcssi_wait_flash_idle+0xc0>
    *value = ctrl_base[address / 4];
    12340134:	02842783          	lw	a5,40(s0)
    if((dwcssi_sr >> 3) & 0x1) //rx fifo not empty
    12340138:	0087f793          	andi	a5,a5,8
    1234013c:	fc0782e3          	beqz	a5,12340100 <dwcssi_wait_flash_idle+0x70>
    *value = ctrl_base[address / 4];
    12340140:	06042783          	lw	a5,96(s0)
            if((rx & SPIFLASH_BSY_BIT) == 0)
    12340144:	0017f793          	andi	a5,a5,1
    12340148:	fa079ce3          	bnez	a5,12340100 <dwcssi_wait_flash_idle+0x70>
    1234014c:	fcdff06f          	j	12340118 <dwcssi_wait_flash_idle+0x88>
	    	return result | ERROR_STACK(0x000300);
    12340150:	30000513          	li	a0,768
    12340154:	fc5ff06f          	j	12340118 <dwcssi_wait_flash_idle+0x88>

0000000012340158 <flash_dwcssi>:
{
    12340158:	f9010113          	addi	sp,sp,-112
    1234015c:	06813023          	sd	s0,96(sp)
    12340160:	04913c23          	sd	s1,88(sp)
    12340164:	05213823          	sd	s2,80(sp)
    12340168:	05413023          	sd	s4,64(sp)
    1234016c:	03513c23          	sd	s5,56(sp)
    12340170:	01913c23          	sd	s9,24(sp)
    12340174:	06113423          	sd	ra,104(sp)
    12340178:	05313423          	sd	s3,72(sp)
    1234017c:	03613823          	sd	s6,48(sp)
    12340180:	03713423          	sd	s7,40(sp)
    12340184:	03813023          	sd	s8,32(sp)
    12340188:	01a13823          	sd	s10,16(sp)
    1234018c:	01b13423          	sd	s11,8(sp)
    12340190:	00050413          	mv	s0,a0
    12340194:	00058a13          	mv	s4,a1
    12340198:	00060a93          	mv	s5,a2
    1234019c:	00068913          	mv	s2,a3
    123401a0:	00070493          	mv	s1,a4
    123401a4:	00078c93          	mv	s9,a5
    result = dwcssi_txwm_wait(ctrl_base);
    123401a8:	e8dff0ef          	jal	ra,12340034 <dwcssi_txwm_wait>
    123401ac:	0005051b          	sext.w	a0,a0
    if(result != ERROR_OK)
    123401b0:	04050463          	beqz	a0,123401f8 <flash_dwcssi+0xa0>
        return result | ERROR_STACK(0x10000);
    123401b4:	000104b7          	lui	s1,0x10
    123401b8:	00956533          	or	a0,a0,s1
}
    123401bc:	06813083          	ld	ra,104(sp)
    123401c0:	06013403          	ld	s0,96(sp)
    123401c4:	05813483          	ld	s1,88(sp)
    123401c8:	05013903          	ld	s2,80(sp)
    123401cc:	04813983          	ld	s3,72(sp)
    123401d0:	04013a03          	ld	s4,64(sp)
    123401d4:	03813a83          	ld	s5,56(sp)
    123401d8:	03013b03          	ld	s6,48(sp)
    123401dc:	02813b83          	ld	s7,40(sp)
    123401e0:	02013c03          	ld	s8,32(sp)
    123401e4:	01813c83          	ld	s9,24(sp)
    123401e8:	01013d03          	ld	s10,16(sp)
    123401ec:	00813d83          	ld	s11,8(sp)
    123401f0:	07010113          	addi	sp,sp,112
    123401f4:	00008067          	ret
    result = dwcssi_wait_flash_idle(ctrl_base);    
    123401f8:	00040513          	mv	a0,s0
    123401fc:	e95ff0ef          	jal	ra,12340090 <dwcssi_wait_flash_idle>
    12340200:	0005051b          	sext.w	a0,a0
    if(result != ERROR_OK)
    12340204:	00050a63          	beqz	a0,12340218 <flash_dwcssi+0xc0>
        result |= ERROR_STACK(0x2000);
    12340208:	000024b7          	lui	s1,0x2
            result |= ERROR_STACK(0x20000);
    1234020c:	009564b3          	or	s1,a0,s1
    return result;
    12340210:	0004851b          	sext.w	a0,s1
    12340214:	fa9ff06f          	j	123401bc <flash_dwcssi+0x64>
    uint32_t page_offset = offset & (page_size - 1);
    12340218:	fffa051b          	addiw	a0,s4,-1
    1234021c:	00a97533          	and	a0,s2,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340220:	00c01b37          	lui	s6,0xc01
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    12340224:	00ff0bb7          	lui	s7,0xff0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340228:	00800d37          	lui	s10,0x800
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    1234022c:	00010c37          	lui	s8,0x10
    uint32_t page_offset = offset & (page_size - 1);
    12340230:	0005051b          	sext.w	a0,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340234:	c0fb0b13          	addi	s6,s6,-1009 # c00c0f <_start-0x1173f3f1>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    12340238:	0ffb8b93          	addi	s7,s7,255 # ff00ff <_start-0x1134ff01>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    1234023c:	407d0d13          	addi	s10,s10,1031 # 800407 <_start-0x11b3fbf9>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    12340240:	fffc0c13          	addi	s8,s8,-1 # ffff <_start-0x12330001>
    while(count > 0) {
    12340244:	fc0486e3          	beqz	s1,12340210 <flash_dwcssi+0xb8>
        if(page_offset + count > page_size)
    12340248:	00a487bb          	addw	a5,s1,a0
    1234024c:	00048993          	mv	s3,s1
    12340250:	00fa7463          	bgeu	s4,a5,12340258 <flash_dwcssi+0x100>
            cur_count = page_size - page_offset;
    12340254:	40aa09bb          	subw	s3,s4,a0
    *value = ctrl_base[address / 4];
    12340258:	00842783          	lw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    1234025c:	000b0693          	mv	a3,s6
    12340260:	40700613          	li	a2,1031
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    12340264:	ffe7f793          	andi	a5,a5,-2
    ctrl_base[address/4] = value;
    12340268:	00f42423          	sw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    1234026c:	00000593          	li	a1,0
    12340270:	00040513          	mv	a0,s0
    12340274:	d9dff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    12340278:	000b8693          	mv	a3,s7
    1234027c:	00000613          	li	a2,0
    12340280:	01800593          	li	a1,24
    12340284:	00040513          	mv	a0,s0
    12340288:	d89ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    1234028c:	00842783          	lw	a5,8(s0)
static int dwcssi_flash_wr_en(volatile uint32_t *ctrl_base, uint8_t frf)
{
    uint8_t tx_start_lv = 0;

    dwcssi_config_tx(ctrl_base, frf, 0, tx_start_lv);
    dwcssi_tx(ctrl_base, SPIFLASH_WRITE_ENABLE);
    12340290:	00600593          	li	a1,6
    12340294:	00040513          	mv	a0,s0
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    12340298:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    1234029c:	00f42423          	sw	a5,8(s0)
    dwcssi_tx(ctrl_base, SPIFLASH_WRITE_ENABLE);
    123402a0:	dd9ff0ef          	jal	ra,12340078 <dwcssi_tx>
    dwcssi_txwm_wait(ctrl_base);
    123402a4:	00040513          	mv	a0,s0
    123402a8:	d8dff0ef          	jal	ra,12340034 <dwcssi_txwm_wait>
    *value = ctrl_base[address / 4];
    123402ac:	00842783          	lw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123402b0:	000b0693          	mv	a3,s6
    123402b4:	000d0613          	mv	a2,s10
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    123402b8:	ffe7f793          	andi	a5,a5,-2
    ctrl_base[address/4] = value;
    123402bc:	00f42423          	sw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123402c0:	00000593          	li	a1,0
    123402c4:	00040513          	mv	a0,s0
    123402c8:	d49ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    123402cc:	000b8693          	mv	a3,s7
    123402d0:	00040637          	lui	a2,0x40
    123402d4:	01800593          	li	a1,24
    123402d8:	00040513          	mv	a0,s0
    123402dc:	d35ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
        dwcssi_config_CTRLR1(ctrl_base, tx_total_len - 1);
    123402e0:	fff9861b          	addiw	a2,s3,-1
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    123402e4:	01867633          	and	a2,a2,s8
    123402e8:	000c0693          	mv	a3,s8
    123402ec:	0006061b          	sext.w	a2,a2
    123402f0:	00400593          	li	a1,4
    123402f4:	00040513          	mv	a0,s0
    123402f8:	d19ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
        dwcssi_set_bits(ctrl_base, DWCSSI_REG_SPI_CTRLR0, 0x40000220, 0xFFFFFFFF);
    123402fc:	40000637          	lui	a2,0x40000
    12340300:	fff00693          	li	a3,-1
    12340304:	22060613          	addi	a2,a2,544 # 40000220 <stack_end+0x2dcbfe08>
    12340308:	0f400593          	li	a1,244
    1234030c:	00040513          	mv	a0,s0
    12340310:	d01ff0ef          	jal	ra,12340010 <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    12340314:	00842783          	lw	a5,8(s0)
{

    // printf("dwcssi slow write offset %x len %x\n", offset, len);
    dwcssi_flash_wr_en(ctrl_base, SPI_FRF_X1_MODE);
    dwcssi_config_tx(ctrl_base, SPI_FRF_X4_MODE, len, 0x4);
    dwcssi_tx(ctrl_base, flash_info);
    12340318:	000c8593          	mv	a1,s9
    1234031c:	00040513          	mv	a0,s0
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    12340320:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    12340324:	00f42423          	sw	a5,8(s0)
    dwcssi_tx(ctrl_base, flash_info);
    12340328:	d51ff0ef          	jal	ra,12340078 <dwcssi_tx>
    dwcssi_tx(ctrl_base, offset);
    1234032c:	00090593          	mv	a1,s2
    12340330:	00040513          	mv	a0,s0
    12340334:	d45ff0ef          	jal	ra,12340078 <dwcssi_tx>
    12340338:	00000d93          	li	s11,0
    for(i = 0; i < in_cnt; i++)
    1234033c:	000d879b          	sext.w	a5,s11
    12340340:	0337e263          	bltu	a5,s3,12340364 <flash_dwcssi+0x20c>
    return (dwcssi_txwm_wait(ctrl_base));
    12340344:	00040513          	mv	a0,s0
    12340348:	cedff0ef          	jal	ra,12340034 <dwcssi_txwm_wait>
    dwcssi_tx_buf(ctrl_base, buffer, len);
    return dwcssi_wait_flash_idle(ctrl_base);
    1234034c:	00040513          	mv	a0,s0
    12340350:	d41ff0ef          	jal	ra,12340090 <dwcssi_wait_flash_idle>
        result = dwcssi_write_buffer(ctrl_base, buffer, offset, cur_count, flash_info);
    12340354:	0005051b          	sext.w	a0,a0
        if(result != ERROR_OK)
    12340358:	02050263          	beqz	a0,1234037c <flash_dwcssi+0x224>
            result |= ERROR_STACK(0x20000);
    1234035c:	000204b7          	lui	s1,0x20
    12340360:	eadff06f          	j	1234020c <flash_dwcssi+0xb4>
        dwcssi_tx(ctrl_base, *(in_buf+i));
    12340364:	01ba87b3          	add	a5,s5,s11
    12340368:	0007c583          	lbu	a1,0(a5)
    1234036c:	00040513          	mv	a0,s0
    12340370:	001d8d93          	addi	s11,s11,1
    12340374:	d05ff0ef          	jal	ra,12340078 <dwcssi_tx>
    for(i = 0; i < in_cnt; i++)
    12340378:	fc5ff06f          	j	1234033c <flash_dwcssi+0x1e4>
        buffer += cur_count;
    1234037c:	02099793          	slli	a5,s3,0x20
    12340380:	0207d793          	srli	a5,a5,0x20
    12340384:	00fa8ab3          	add	s5,s5,a5
        offset += cur_count;
    12340388:	0139093b          	addw	s2,s2,s3
        count  -= cur_count;
    1234038c:	413484bb          	subw	s1,s1,s3
    12340390:	eb5ff06f          	j	12340244 <flash_dwcssi+0xec>
