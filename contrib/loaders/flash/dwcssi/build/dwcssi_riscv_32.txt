
/home/timwang/Documents/debugger/al_openocd/contrib/loaders/flash/dwcssi/build/dwcssi_riscv_32.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000012340000 <_start>:
#endif

		.section .text.entry
		.global _start
_start:
		lla		sp, stack_end
    12340000:	00000117          	auipc	sp,0x0
    12340004:	2d810113          	addi	sp,sp,728 # 123402d8 <stack_end>
		jal 	flash_dwcssi
    12340008:	0d2000ef          	jal	ra,123400da <flash_dwcssi>
		ebreak
    1234000c:	9002                	ebreak

000000001234000e <dwcssi_set_bits>:
}

static void dwcssi_read_reg(volatile uint32_t *ctrl_base, uint32_t *value, uint32_t address)
{

    *value = ctrl_base[address / 4];
    1234000e:	0025d59b          	srliw	a1,a1,0x2
    12340012:	058a                	slli	a1,a1,0x2
    12340014:	95aa                	add	a1,a1,a0
    12340016:	419c                	lw	a5,0(a1)
    12340018:	2781                	sext.w	a5,a5

static void dwcssi_set_bits(volatile uint32_t *ctrl_base, uint32_t address, uint32_t value, uint32_t bitmask)
{
    uint32_t rd_value, wr_value;
    dwcssi_read_reg(ctrl_base, &rd_value,address);
    wr_value = (rd_value & ~bitmask) | (value & bitmask);
    1234001a:	8e3d                	xor	a2,a2,a5
    1234001c:	8e75                	and	a2,a2,a3
    1234001e:	8fb1                	xor	a5,a5,a2
    ctrl_base[address/4] = value;
    12340020:	c19c                	sw	a5,0(a1)
    dwcssi_write_reg(ctrl_base, address, wr_value);
}
    12340022:	8082                	ret

0000000012340024 <dwcssi_tx>:
    *value = ctrl_base[address / 4];
    12340024:	551c                	lw	a5,40(a0)
    uint32_t fifo_not_full=0;

    while(1) 
    {
        fifo_not_full = dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_TFTNF_MASK, 1);
        if(fifo_not_full)
    12340026:	8b89                	andi	a5,a5,2
    12340028:	dff5                	beqz	a5,12340024 <dwcssi_tx>
    ctrl_base[address/4] = value;
    1234002a:	d12c                	sw	a1,96(a0)
        }
    }

    // printf("tx timeout\n");
    return ERROR_DWCSSI_TX;
}
    1234002c:	4501                	li	a0,0
    1234002e:	8082                	ret

0000000012340030 <dwcssi_txwm_wait>:
{
    12340030:	3e900793          	li	a5,1001
    *value = ctrl_base[address / 4];
    12340034:	5518                	lw	a4,40(a0)
        if(dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_TFE_MASK, 2))
    12340036:	8b11                	andi	a4,a4,4
    12340038:	e711                	bnez	a4,12340044 <dwcssi_txwm_wait+0x14>
        if(timeout > TIMEOUT)
    1234003a:	37fd                	addiw	a5,a5,-1
    1234003c:	ffe5                	bnez	a5,12340034 <dwcssi_txwm_wait+0x4>
            return ERROR_DWCSSI_TXWM_WAIT;
    1234003e:	00200537          	lui	a0,0x200
    12340042:	8082                	ret
    12340044:	3e900793          	li	a5,1001
    *value = ctrl_base[address / 4];
    12340048:	5518                	lw	a4,40(a0)
        if(!(dwcssi_get_bits(ctrl_base, DWCSSI_REG_SR, DWCSSI_SR_BUSY_MASK, 0)))
    1234004a:	8b05                	andi	a4,a4,1
    1234004c:	c701                	beqz	a4,12340054 <dwcssi_txwm_wait+0x24>
        if(timeout > TIMEOUT)
    1234004e:	37fd                	addiw	a5,a5,-1
    12340050:	ffe5                	bnez	a5,12340048 <dwcssi_txwm_wait+0x18>
    12340052:	b7f5                	j	1234003e <dwcssi_txwm_wait+0xe>
    return ERROR_OK;
    12340054:	4501                	li	a0,0
}
    12340056:	8082                	ret

0000000012340058 <dwcssi_wait_flash_idle>:
    *value = ctrl_base[address / 4];
    12340058:	451c                	lw	a5,8(a0)
    
    return ERROR_DWCSSI_RX;
}

static int dwcssi_wait_flash_idle(volatile uint32_t *ctrl_base)
{
    1234005a:	1141                	addi	sp,sp,-16
    1234005c:	e406                	sd	ra,8(sp)
    *value = ctrl_base[address / 4];
    1234005e:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    12340060:	9bf9                	andi	a5,a5,-2
{
    12340062:	e022                	sd	s0,0(sp)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340064:	00c016b7          	lui	a3,0xc01
    12340068:	6605                	lui	a2,0x1
    ctrl_base[address/4] = value;
    1234006a:	c51c                	sw	a5,8(a0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    1234006c:	c0f68693          	addi	a3,a3,-1009 # c00c0f <_start-0x1173f3f1>
    12340070:	c0760613          	addi	a2,a2,-1017 # c07 <_start-0x1233f3f9>
    12340074:	4581                	li	a1,0
{
    12340076:	842a                	mv	s0,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340078:	f97ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    1234007c:	66c1                	lui	a3,0x10
    1234007e:	16fd                	addi	a3,a3,-1
    12340080:	4601                	li	a2,0
    12340082:	4591                	li	a1,4
    12340084:	8522                	mv	a0,s0
    12340086:	f89ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    1234008a:	00ff06b7          	lui	a3,0xff0
    1234008e:	0ff68693          	addi	a3,a3,255 # ff00ff <_start-0x1134ff01>
    12340092:	4601                	li	a2,0
    12340094:	45e1                	li	a1,24
    12340096:	8522                	mv	a0,s0
    12340098:	f77ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    1234009c:	441c                	lw	a5,8(s0)
    1234009e:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    123400a0:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    123400a4:	c41c                	sw	a5,8(s0)

    dwcssi_config_eeprom(ctrl_base, rx_len);

    while(1)
    {
        result = dwcssi_tx(ctrl_base, SPIFLASH_READ_STATUS);
    123400a6:	4595                	li	a1,5
    123400a8:	8522                	mv	a0,s0
    123400aa:	f7bff0ef          	jal	ra,12340024 <dwcssi_tx>
    123400ae:	2501                	sext.w	a0,a0
        if (result != ERROR_OK)
    123400b0:	c519                	beqz	a0,123400be <dwcssi_wait_flash_idle+0x66>
	    	return result | ERROR_STACK(0x000200);
    123400b2:	20056513          	ori	a0,a0,512
                return (ERROR_OK);
            }
        }
    }

}
    123400b6:	60a2                	ld	ra,8(sp)
    123400b8:	6402                	ld	s0,0(sp)
    123400ba:	0141                	addi	sp,sp,16
    123400bc:	8082                	ret
        if (dwcssi_txwm_wait(ctrl_base) != ERROR_OK)
    123400be:	8522                	mv	a0,s0
    123400c0:	f71ff0ef          	jal	ra,12340030 <dwcssi_txwm_wait>
    123400c4:	e901                	bnez	a0,123400d4 <dwcssi_wait_flash_idle+0x7c>
    *value = ctrl_base[address / 4];
    123400c6:	541c                	lw	a5,40(s0)
    if((dwcssi_sr >> 3) & 0x1) //rx fifo not empty
    123400c8:	8ba1                	andi	a5,a5,8
    123400ca:	dff1                	beqz	a5,123400a6 <dwcssi_wait_flash_idle+0x4e>
    *value = ctrl_base[address / 4];
    123400cc:	503c                	lw	a5,96(s0)
            if((rx & SPIFLASH_BSY_BIT) == 0)
    123400ce:	8b85                	andi	a5,a5,1
    123400d0:	fbf9                	bnez	a5,123400a6 <dwcssi_wait_flash_idle+0x4e>
    123400d2:	b7d5                	j	123400b6 <dwcssi_wait_flash_idle+0x5e>
	    	return result | ERROR_STACK(0x000300);
    123400d4:	30000513          	li	a0,768
    123400d8:	bff9                	j	123400b6 <dwcssi_wait_flash_idle+0x5e>

00000000123400da <flash_dwcssi>:
{
    123400da:	7159                	addi	sp,sp,-112
    123400dc:	f0a2                	sd	s0,96(sp)
    123400de:	eca6                	sd	s1,88(sp)
    123400e0:	e8ca                	sd	s2,80(sp)
    123400e2:	e0d2                	sd	s4,64(sp)
    123400e4:	fc56                	sd	s5,56(sp)
    123400e6:	ec66                	sd	s9,24(sp)
    123400e8:	f486                	sd	ra,104(sp)
    123400ea:	e4ce                	sd	s3,72(sp)
    123400ec:	f85a                	sd	s6,48(sp)
    123400ee:	f45e                	sd	s7,40(sp)
    123400f0:	f062                	sd	s8,32(sp)
    123400f2:	e86a                	sd	s10,16(sp)
    123400f4:	e46e                	sd	s11,8(sp)
    123400f6:	842a                	mv	s0,a0
    123400f8:	8a2e                	mv	s4,a1
    123400fa:	8ab2                	mv	s5,a2
    123400fc:	8936                	mv	s2,a3
    123400fe:	84ba                	mv	s1,a4
    12340100:	8cbe                	mv	s9,a5
    result = dwcssi_txwm_wait(ctrl_base);
    12340102:	f2fff0ef          	jal	ra,12340030 <dwcssi_txwm_wait>
    12340106:	2501                	sext.w	a0,a0
    if(result != ERROR_OK)
    12340108:	c115                	beqz	a0,1234012c <flash_dwcssi+0x52>
        return result | ERROR_STACK(0x10000);
    1234010a:	64c1                	lui	s1,0x10
    1234010c:	8d45                	or	a0,a0,s1
}
    1234010e:	70a6                	ld	ra,104(sp)
    12340110:	7406                	ld	s0,96(sp)
    12340112:	64e6                	ld	s1,88(sp)
    12340114:	6946                	ld	s2,80(sp)
    12340116:	69a6                	ld	s3,72(sp)
    12340118:	6a06                	ld	s4,64(sp)
    1234011a:	7ae2                	ld	s5,56(sp)
    1234011c:	7b42                	ld	s6,48(sp)
    1234011e:	7ba2                	ld	s7,40(sp)
    12340120:	7c02                	ld	s8,32(sp)
    12340122:	6ce2                	ld	s9,24(sp)
    12340124:	6d42                	ld	s10,16(sp)
    12340126:	6da2                	ld	s11,8(sp)
    12340128:	6165                	addi	sp,sp,112
    1234012a:	8082                	ret
    result = dwcssi_wait_flash_idle(ctrl_base);    
    1234012c:	8522                	mv	a0,s0
    1234012e:	f2bff0ef          	jal	ra,12340058 <dwcssi_wait_flash_idle>
    12340132:	2501                	sext.w	a0,a0
    if(result != ERROR_OK)
    12340134:	c511                	beqz	a0,12340140 <flash_dwcssi+0x66>
        result |= ERROR_STACK(0x2000);
    12340136:	6489                	lui	s1,0x2
            result |= ERROR_STACK(0x20000);
    12340138:	8cc9                	or	s1,s1,a0
    return result;
    1234013a:	0004851b          	sext.w	a0,s1
    1234013e:	bfc1                	j	1234010e <flash_dwcssi+0x34>
    uint32_t page_offset = offset & (page_size - 1);
    12340140:	fffa051b          	addiw	a0,s4,-1
    12340144:	00a97533          	and	a0,s2,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340148:	00c01b37          	lui	s6,0xc01
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    1234014c:	00ff0bb7          	lui	s7,0xff0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340150:	00800d37          	lui	s10,0x800
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    12340154:	6c41                	lui	s8,0x10
    uint32_t page_offset = offset & (page_size - 1);
    12340156:	2501                	sext.w	a0,a0
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340158:	c0fb0b13          	addi	s6,s6,-1009 # c00c0f <_start-0x1173f3f1>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    1234015c:	0ffb8b93          	addi	s7,s7,255 # ff00ff <_start-0x1134ff01>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340160:	407d0d13          	addi	s10,s10,1031 # 800407 <_start-0x11b3fbf9>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    12340164:	1c7d                	addi	s8,s8,-1
    while(count > 0) {
    12340166:	d8f1                	beqz	s1,1234013a <flash_dwcssi+0x60>
        if(page_offset + count > page_size)
    12340168:	00a487bb          	addw	a5,s1,a0
    1234016c:	89a6                	mv	s3,s1
    1234016e:	00fa7463          	bgeu	s4,a5,12340176 <flash_dwcssi+0x9c>
            cur_count = page_size - page_offset;
    12340172:	40aa09bb          	subw	s3,s4,a0
    *value = ctrl_base[address / 4];
    12340176:	441c                	lw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340178:	86da                	mv	a3,s6
    1234017a:	40700613          	li	a2,1031
    *value = ctrl_base[address / 4];
    1234017e:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    12340180:	9bf9                	andi	a5,a5,-2
    ctrl_base[address/4] = value;
    12340182:	c41c                	sw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    12340184:	4581                	li	a1,0
    12340186:	8522                	mv	a0,s0
    12340188:	e87ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    1234018c:	86de                	mv	a3,s7
    1234018e:	4601                	li	a2,0
    12340190:	45e1                	li	a1,24
    12340192:	8522                	mv	a0,s0
    12340194:	e7bff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    12340198:	441c                	lw	a5,8(s0)
static int dwcssi_flash_wr_en(volatile uint32_t *ctrl_base, uint8_t frf)
{
    uint8_t tx_start_lv = 0;

    dwcssi_config_tx(ctrl_base, frf, 0, tx_start_lv);
    dwcssi_tx(ctrl_base, SPIFLASH_WRITE_ENABLE);
    1234019a:	4599                	li	a1,6
    1234019c:	8522                	mv	a0,s0
    *value = ctrl_base[address / 4];
    1234019e:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    123401a0:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    123401a4:	c41c                	sw	a5,8(s0)
    dwcssi_tx(ctrl_base, SPIFLASH_WRITE_ENABLE);
    123401a6:	e7fff0ef          	jal	ra,12340024 <dwcssi_tx>
    dwcssi_txwm_wait(ctrl_base);
    123401aa:	8522                	mv	a0,s0
    123401ac:	e85ff0ef          	jal	ra,12340030 <dwcssi_txwm_wait>
    *value = ctrl_base[address / 4];
    123401b0:	441c                	lw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123401b2:	86da                	mv	a3,s6
    123401b4:	866a                	mv	a2,s10
    *value = ctrl_base[address / 4];
    123401b6:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en & ~DWCSSI_SSIC_EN(1));
    123401b8:	9bf9                	andi	a5,a5,-2
    ctrl_base[address/4] = value;
    123401ba:	c41c                	sw	a5,8(s0)
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR0, val, mask);
    123401bc:	4581                	li	a1,0
    123401be:	8522                	mv	a0,s0
    123401c0:	e4fff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_TXFTLR, val, mask);
    123401c4:	86de                	mv	a3,s7
    123401c6:	00040637          	lui	a2,0x40
    123401ca:	45e1                	li	a1,24
    123401cc:	8522                	mv	a0,s0
    123401ce:	e41ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
        dwcssi_config_CTRLR1(ctrl_base, tx_total_len - 1);
    123401d2:	fff9861b          	addiw	a2,s3,-1
    dwcssi_set_bits(ctrl_base, DWCSSI_REG_CTRLR1, DWCSSI_CTRLR1_NDF(ndf), DWCSSI_CTRLR1_NDF_MASK);   
    123401d6:	01867633          	and	a2,a2,s8
    123401da:	86e2                	mv	a3,s8
    123401dc:	2601                	sext.w	a2,a2
    123401de:	4591                	li	a1,4
    123401e0:	8522                	mv	a0,s0
    123401e2:	e2dff0ef          	jal	ra,1234000e <dwcssi_set_bits>
        dwcssi_set_bits(ctrl_base, DWCSSI_REG_SPI_CTRLR0, 0x40000220, 0xFFFFFFFF);
    123401e6:	40000637          	lui	a2,0x40000
    123401ea:	56fd                	li	a3,-1
    123401ec:	22060613          	addi	a2,a2,544 # 40000220 <stack_end+0x2dcbff48>
    123401f0:	0f400593          	li	a1,244
    123401f4:	8522                	mv	a0,s0
    123401f6:	e19ff0ef          	jal	ra,1234000e <dwcssi_set_bits>
    *value = ctrl_base[address / 4];
    123401fa:	441c                	lw	a5,8(s0)
{

    // printf("dwcssi slow write offset %x len %x\n", offset, len);
    dwcssi_flash_wr_en(ctrl_base, SPI_FRF_X1_MODE);
    dwcssi_config_tx(ctrl_base, SPI_FRF_X4_MODE, len, 0x4);
    dwcssi_tx(ctrl_base, flash_info);
    123401fc:	85e6                	mv	a1,s9
    123401fe:	8522                	mv	a0,s0
    *value = ctrl_base[address / 4];
    12340200:	2781                	sext.w	a5,a5
    dwcssi_write_reg(ctrl_base, DWCSSI_REG_SSIENR, ssic_en | DWCSSI_SSIC_EN(1));
    12340202:	0017e793          	ori	a5,a5,1
    ctrl_base[address/4] = value;
    12340206:	c41c                	sw	a5,8(s0)
    dwcssi_tx(ctrl_base, flash_info);
    12340208:	e1dff0ef          	jal	ra,12340024 <dwcssi_tx>
    dwcssi_tx(ctrl_base, offset);
    1234020c:	85ca                	mv	a1,s2
    1234020e:	8522                	mv	a0,s0
    12340210:	e15ff0ef          	jal	ra,12340024 <dwcssi_tx>
    12340214:	4d81                	li	s11,0
    for(i = 0; i < in_cnt; i++)
    12340216:	000d879b          	sext.w	a5,s11
    1234021a:	0137ed63          	bltu	a5,s3,12340234 <flash_dwcssi+0x15a>
    return (dwcssi_txwm_wait(ctrl_base));
    1234021e:	8522                	mv	a0,s0
    12340220:	e11ff0ef          	jal	ra,12340030 <dwcssi_txwm_wait>
    dwcssi_tx_buf(ctrl_base, buffer, len);
    return dwcssi_wait_flash_idle(ctrl_base);
    12340224:	8522                	mv	a0,s0
    12340226:	e33ff0ef          	jal	ra,12340058 <dwcssi_wait_flash_idle>
        result = dwcssi_write_buffer(ctrl_base, buffer, offset, cur_count, flash_info);
    1234022a:	2501                	sext.w	a0,a0
        if(result != ERROR_OK)
    1234022c:	cd09                	beqz	a0,12340246 <flash_dwcssi+0x16c>
            result |= ERROR_STACK(0x20000);
    1234022e:	000204b7          	lui	s1,0x20
    12340232:	b719                	j	12340138 <flash_dwcssi+0x5e>
        dwcssi_tx(ctrl_base, *(in_buf+i));
    12340234:	01ba87b3          	add	a5,s5,s11
    12340238:	0007c583          	lbu	a1,0(a5)
    1234023c:	8522                	mv	a0,s0
    1234023e:	0d85                	addi	s11,s11,1
    12340240:	de5ff0ef          	jal	ra,12340024 <dwcssi_tx>
    for(i = 0; i < in_cnt; i++)
    12340244:	bfc9                	j	12340216 <flash_dwcssi+0x13c>
        buffer += cur_count;
    12340246:	02099793          	slli	a5,s3,0x20
    1234024a:	9381                	srli	a5,a5,0x20
    1234024c:	9abe                	add	s5,s5,a5
        offset += cur_count;
    1234024e:	0139093b          	addw	s2,s2,s3
        count  -= cur_count;
    12340252:	413484bb          	subw	s1,s1,s3
    12340256:	bf01                	j	12340166 <flash_dwcssi+0x8c>
