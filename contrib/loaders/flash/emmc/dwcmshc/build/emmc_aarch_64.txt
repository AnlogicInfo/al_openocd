
D:/work/2022/al9000/sw/debugger/al_openocd/contrib/loaders/flash/emmc/dwcmshc/build/emmc_aarch_64.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000061000000 <_start>:
# define REGBYTES 16

		.section .text.entry
		.global _start
_start:
		ldr x28, =stack_end
    61000000:	5800009c 	ldr	x28, 61000010 <_start+0x10>
        mov sp, x28
    61000004:	9100039f 	mov	sp, x28
		bl    	emmc_dwcmshc
    61000008:	94000004 	bl	61000018 <emmc_dwcmshc>

        hlt #0x0B
    6100000c:	d4400160 	hlt	#0xb
    61000010:	610000a0 	.word	0x610000a0
    61000014:	00000000 	.word	0x00000000

0000000061000018 <emmc_dwcmshc>:
    uint8_t done_flag;

    while(size_in_bytes > 0)
    {
        reg_write((ctrl_base + ARGUMENT_R), offset);
        reg_write((ctrl_base + XFER_CMD_R), WR_SINGLE_BLK);
    61000018:	52801048 	mov	w8, #0x82                  	// #130
    while(size_in_bytes > 0)
    6100001c:	d2800004 	mov	x4, #0x0                   	// #0
        reg_write((ctrl_base + XFER_CMD_R), WR_SINGLE_BLK);
    61000020:	72a30748 	movk	w8, #0x183a, lsl #16
    61000024:	4b040065 	sub	w5, w3, w4
    61000028:	0b040027 	add	w7, w1, w4
    6100002c:	8b040046 	add	x6, x2, x4
    while(size_in_bytes > 0)
    61000030:	710000bf 	cmp	w5, #0x0
    61000034:	5400004c 	b.gt	6100003c <emmc_dwcmshc+0x24>
        offset += BLOCK_SIZE;
        buffer += BLOCK_SIZE_IN_WORD;
    }


}
    61000038:	d65f03c0 	ret
        reg_write((ctrl_base + ARGUMENT_R), offset);
    6100003c:	b9000807 	str	w7, [x0, #8]
        reg_write((ctrl_base + XFER_CMD_R), WR_SINGLE_BLK);
    61000040:	b9000c08 	str	w8, [x0, #12]
            int_val = reg_read(ctrl_base + NORMAL_ERROR_INT_R);
    61000044:	b9403005 	ldr	w5, [x0, #48]
            if(done_flag && ((int_val >> 16) ==0))
    61000048:	3627ffe5 	tbz	w5, #4, 61000044 <emmc_dwcmshc+0x2c>
    6100004c:	6b4543ff 	cmp	wzr, w5, lsr #16
    61000050:	54ffffa1 	b.ne	61000044 <emmc_dwcmshc+0x2c>  // b.any
        reg_write(ctrl_base + NORMAL_ERROR_INT_R, int_val | (1<<INT_BUF_WR_READY));
    61000054:	321c00a5 	orr	w5, w5, #0x10
    61000058:	b9003005 	str	w5, [x0, #48]
    6100005c:	d2800005 	mov	x5, #0x0                   	// #0
            reg_write(ctrl_base + BUF_DATA_R, *(buffer + i));
    61000060:	b86578c7 	ldr	w7, [x6, x5, lsl #2]
        for(i=0; i < BLOCK_SIZE_IN_WORD; i++)
    61000064:	910004a5 	add	x5, x5, #0x1
            reg_write(ctrl_base + BUF_DATA_R, *(buffer + i));
    61000068:	b9002007 	str	w7, [x0, #32]
        for(i=0; i < BLOCK_SIZE_IN_WORD; i++)
    6100006c:	f10200bf 	cmp	x5, #0x80
    61000070:	54ffff81 	b.ne	61000060 <emmc_dwcmshc+0x48>  // b.any
            int_val = reg_read(ctrl_base + NORMAL_ERROR_INT_R);
    61000074:	b9403005 	ldr	w5, [x0, #48]
            if(done_flag && ((int_val >> 16) ==0))
    61000078:	360fffe5 	tbz	w5, #1, 61000074 <emmc_dwcmshc+0x5c>
    6100007c:	6b4543ff 	cmp	wzr, w5, lsr #16
    61000080:	54ffffa1 	b.ne	61000074 <emmc_dwcmshc+0x5c>  // b.any
        reg_write(ctrl_base + NORMAL_ERROR_INT_R, int_val | (1<<INT_XFER_COMPLETE_OFFSET));
    61000084:	321f00a5 	orr	w5, w5, #0x2
    61000088:	91080084 	add	x4, x4, #0x200
    6100008c:	b9003005 	str	w5, [x0, #48]
        buffer += BLOCK_SIZE_IN_WORD;
    61000090:	17ffffe5 	b	61000024 <emmc_dwcmshc+0xc>
